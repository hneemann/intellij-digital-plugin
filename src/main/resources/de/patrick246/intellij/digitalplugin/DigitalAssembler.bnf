{
    parserClass="de.patrick246.intellij.digitalplugin.language.parser.DAParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="DA"
    psiImplClassSuffix="Impl"
    psiPackage="de.patrick246.intellij.digitalplugin.language.psi"
    psiImplPackage="de.patrick246.intellij.digitalplugin.language.psi.impl"

    elementTypeHolderClass="de.patrick246.intellij.digitalplugin.language.psi.DATypes"
    elementTypeClass="de.patrick246.intellij.digitalplugin.language.psi.DAElementType"
    tokenTypeClass="de.patrick246.intellij.digitalplugin.language.psi.DATokenType"
}

daFile ::= line (NEWLINE line)*
line ::=  [label] [(directive | instruction)] [commentLine]

instruction ::= (simpleInstructionLine|
                            regRegInstructionLine|
                            regImmInstructionLine|
                            regInstructionLine|
                            immInstructionLine|
                            immRegInstructionLine|
                            indRegRegInstructionLine|
                            regIndRegInstructionLine|
                            indCalcRegInstruction|
                            regIndCalcInstruction) {recoverWhile=instruction_recover}

private instruction_recover ::= !(NEWLINE)
// various different formats for instruction parameters
simpleInstructionLine ::= SIMPLEINSTRUCTION
regRegInstructionLine ::= REGREGINSTRUCTION register COMMA register {pin=1}
regImmInstructionLine ::= REGIMMINSTRUCTION register COMMA expr {pin=1}
regInstructionLine ::= REGINSTRUCTION register {pin=1}
immInstructionLine ::= IMMINSTRUCTION expr {pin=1}
immRegInstructionLine ::= IMMREGINSTRUCTION expr COMMA register {pin=1}
indRegRegInstructionLine ::= INDREGREGINSTRUCTION indRegister COMMA register {pin=1}
regIndRegInstructionLine ::= REGINDREGINSTRUCTION register COMMA indRegister {pin=1}
indCalcRegInstruction ::= INDCALCREGINSTRUCTION indCalcRegister COMMA register {pin=1}
regIndCalcInstruction ::= REGINDCALCINSTRUCTION register COMMA indCalcRegister {pin=1}

// parameter types
register ::= (REGNUMBER | ALIAS)
indRegister ::= "[" register "]"
commentLine ::= COMMENTCHAR COMMENTTEXT
indCalcRegister ::= "[" register "+" expr "]"
expr ::= term '+' expr | term '-' expr | term
term ::= factor '*' term | factor '/' term | factor
factor ::= '(' expr ')' | HEXNUM | constalias
constalias ::= ALIAS

// assembler directives
directive ::= "." (aliasDirectiveLine | addressDirective | aliasRegisterDirectiveLine | stringDirectiveLine | aliasMultivalueDirectiveLine | aliasExprDirectiveLine) {pin=1}
addressDirective ::= ADDRESSDIRECTIVE HEXNUM
aliasDirectiveLine ::= ALIASDIRECTIVE ALIAS
aliasRegisterDirectiveLine ::= ALIASREGISTERDIRECTIVE registerAliasDefinition REGNUMBER
registerAliasDefinition ::= ALIASDEFINITIONTOKEN
stringDirectiveLine ::=  STRINGDIRECTIVE STRINGTEXT
//aliasMultivalueDirectiveLine ::= ALIASMULTIVALUEDIRECTIVE constalias STRINGTEXT
aliasMultivalueDirectiveLine ::= ALIASMULTIVALUEDIRECTIVE constalias (STRINGTEXT  | expr) (',' expr)*
aliasExprDirectiveLine ::= ALIASEXPRDIRECTIVE immediateAliasDefinition expr
immediateAliasDefinition ::= ALIASDEFINITIONTOKEN

label ::= LABELDEFINITION COLON